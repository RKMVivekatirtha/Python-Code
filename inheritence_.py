# -*- coding: utf-8 -*-
"""Inheritence .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tW8kuLlcs15oOdqTWV4srP32X5rbaqN0
"""

class base:
  def __init__(self):
    print("I am base class constuctor")
  def displayb(self):
    print("I am from base class")

class derive(base):   #Inherits
  #def __init__(self):
    #print("I am derived class constructor")

  def displayd(self):
    #super.displayb(self)
    print("I am from derived class")

#main()
ob1=derive()
ob1.displayb()
ob1.displayd()

class base:
  def __init__(self):
    print("I am base class constuctor")
  def displayb(self):
    print("I am from base class")

class derive(base):   #Inherits
  def __init__(self):
    print("I am derived class constructor")
    super(derive,self).__init__() #Another way to call constructor

  def displayd(self):
    #super.displayb(self)
    print("I am from derived class")
    base.__init__(self)  #Here we can call base class constructor

#main()
ob1=derive()
#base.__init__(ob1)   #Another way to run base class constuctor
ob1.displayb()
ob1.displayd()

class base:
  def __init__(self):
    print("I am base class constuctor")
  def display(self):
    print("I am from base class")

class derive(base):   #Inherits
  def __init__(self):
    print("I am derived class constructor")
    #super(derive,self).__init__()
  def display(self):
    base.display(self)
    #super(derive,self).display()
    print("I am from derived class")

#main()
ob1=derive()
#base.display(ob1)
ob1.display()

class base:
  def __init__(self,ln,bd):
    self.ln=ln
    self.bd=bd
    #print("Enter the length of the cube",self.ln)
    #print("Enter the breadth of the cube",self.bd)
  def area(self):
    self.ar=self.ln*self.bd
    print("The area of the cube",self.ar)
  #def show(self):
    #print("The area of the cube",self.area)
class derive(base):
  def __init__(self,ln,bd,ht):
    self.ht=ht
    base.__init__(self,ln,bd)
    #print("Enter the height of the cube",self.ht)
  def vol(self):
    self.v=self.ar*self.ht
    print("The volume of the cube",self.v)

#main()
ob1=derive(4,3,2)
ob1.area()
#ob1.show()
ob1.vol()

#Multiple level Inheritence
class base():
  def __init__(self):
    print("This is the base class constructor")
  def display(self):
    print("This is Display function of base class")

class derive1(base):
  def __init__(self):
    print("Derived 1 constructor")
  def display(self):
    print("Derived 1 display is running")
class derive2(derive1):
  def __init__(self):
    print("Derived 2 constructor")
  def display(self):
    print("Derived 2 display is running")

#main()
ob1=derive1()
ob1.display()
#ob1.displayb()
#ob1.displayd1()
#ob1.displayd2()

class vehicle:
  def drive(self):
    print("Drive vehicle on the road")
class flyingvehicle():
  def fly(self):
    print("Fly me on the sky")
class Flyingcarriage(vehicle,flyingvehicle):
  pass

fv=Flyingcarriage()
fv.drive()
fv.fly()